#############################################################################
# Makefile for building ./zcm
# Generated by tmake at 01:08, 2008/02/25
#     Project: zcm
#    Template: app
#############################################################################

####### Compiler, tools and options

CC	=	arm-linux-gcc
CXX	=	arm-linux-g++
CFLAGS	=	-pipe -Wall -W -O2 -DNO_DEBUG
CXXFLAGS=	-pipe -DQT_QWS_EBX -DQT_QWS_CUSTOM -DQWS -fno-exceptions -fno-rtti -Wall -W -O2 -DNO_DEBUG
INCPATH	=	-I$(QTDIR)/library -I$(QTDIR)/include
LINK	=	arm-linux-gcc
LFLAGS	=	-Wl,-rpath,$(QTDIR)/lib,-rpath-link,$(QTDIR)/lib
LIBS	=	$(SUBLIBS) -L$(QTDIR)/lib -lqpe -lsl -lqte
MOC	=	$(QTDIR)/bin/moc
UIC	=	$(QTDIR)/bin/uic

TAR	=	tar -cf
GZIP	=	gzip -9f

####### Files

HEADERS =	toolbarimg.h \
		toolbarimg_reverse.h \
		zcm.h \
		zcmimage.h
SOURCES =	canvas.cpp \
		main.cpp \
		mytoolbar.cpp \
		zcm.cpp
OBJECTS =	canvas.o \
		main.o \
		mytoolbar.o \
		zcm.o
INTERFACES =	
UICDECLS =	
UICIMPLS =	
SRCMOC	=	moc_zcm.cpp
OBJMOC	=	moc_zcm.o
DIST	=	
TARGET	=	./zcm
INTERFACE_DECL_PATH = .

####### Implicit rules

.SUFFIXES: .cpp .cxx .cc .C .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules


all: $(TARGET)

$(TARGET): $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

moc: $(SRCMOC)

tmake: Makefile

Makefile: zcm.pro
	tmake zcm.pro -o Makefile

dist:
	$(TAR) zcm.tar zcm.pro $(SOURCES) $(HEADERS) $(INTERFACES) $(DIST)
	$(GZIP) zcm.tar

clean:
	-rm -f $(OBJECTS) $(OBJMOC) $(SRCMOC) $(UICIMPLS) $(UICDECLS) $(TARGET)
	-rm -f *~ core

####### Sub-libraries


###### Combined headers


####### Compile

canvas.o: canvas.cpp \
		zcm.h \
		zcmimage.h

main.o: main.cpp \
		zcm.h

mytoolbar.o: mytoolbar.cpp \
		zcm.h \
		toolbarimg.h \
		toolbarimg_reverse.h

zcm.o: zcm.cpp \
		zcm.h

moc_zcm.o: moc_zcm.cpp \
		zcm.h

moc_zcm.cpp: zcm.h
	$(MOC) zcm.h -o moc_zcm.cpp

